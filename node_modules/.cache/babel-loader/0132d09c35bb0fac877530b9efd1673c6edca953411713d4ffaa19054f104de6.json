{"ast":null,"code":"import apiRequest from './api';\nimport * as mockApi from './mockApi';\n\n// Flag to determine if we should use mock API\nconst USE_MOCK_API = false; // Set to false when backend is available\n\n// Get all recipes with optional pagination\nexport const getRecipes = async (page = 1, pageSize = 12) => {\n  if (USE_MOCK_API) {\n    return mockApi.getRecipes(page, pageSize);\n  }\n  return apiRequest(`/recipes/?page=${page}&page_size=${pageSize}`);\n};\n\n// Get a specific recipe by ID\nexport const getRecipe = async id => {\n  if (USE_MOCK_API) {\n    return mockApi.getRecipe(id);\n  }\n  return apiRequest(`/recipes/${id}/`);\n};\n\n// Create a new recipe\nexport const createRecipe = async recipeData => {\n  if (USE_MOCK_API) {\n    return mockApi.createRecipe(recipeData);\n  }\n  console.log('Creating recipe with data:', recipeData); // Debugging\n\n  // Handle file upload by creating FormData\n  const formData = new FormData();\n\n  // Add all fields to formData with correct field names\n  Object.keys(recipeData).forEach(key => {\n    if (key === 'image' && recipeData[key]) {\n      // Handle file upload\n      formData.append(key, recipeData[key]);\n    } else if (key === 'ingredients' || key === 'instructions') {\n      // Convert arrays to JSON strings\n      formData.append(key, JSON.stringify(recipeData[key]));\n    } else if (recipeData[key] !== null && recipeData[key] !== undefined) {\n      // Map frontend field names to backend field names\n      let backendKey = key;\n      if (key === 'prepTime') {\n        backendKey = 'prep_time';\n      } else if (key === 'cookTime') {\n        backendKey = 'cook_time';\n      }\n      formData.append(backendKey, recipeData[key]);\n    }\n  });\n  console.log('FormData being sent:', formData); // Debugging\n\n  return apiRequest('/recipes/', {\n    method: 'POST',\n    body: formData\n  }, true); // Pass true to indicate this is a FormData request\n};\n\n// Update an existing recipe\nexport const updateRecipe = async (id, recipeData) => {\n  if (USE_MOCK_API) {\n    return mockApi.updateRecipe(id, recipeData);\n  }\n\n  // Handle file upload by creating FormData\n  const formData = new FormData();\n\n  // Add all fields to formData with correct field names\n  Object.keys(recipeData).forEach(key => {\n    if (key === 'image' && recipeData[key]) {}\n  });\n  return apiRequest(`/recipes/${id}/`, {\n    method: 'PUT',\n    body: formData\n  }, true); // Pass true to indicate this is a FormData request\n};\n\n// Delete a recipe\nexport const deleteRecipe = async id => {\n  if (USE_MOCK_API) {\n    return mockApi.deleteRecipe(id);\n  }\n  return apiRequest(`/recipes/${id}/`, {\n    method: 'DELETE'\n  });\n};\n\n// Search recipes by name or ingredients\nexport const searchRecipes = async (query, page = 1, pageSize = 12) => {\n  if (USE_MOCK_API) {\n    return mockApi.searchRecipes(query, page, pageSize);\n  }\n  return apiRequest(`/recipes/search/?q=${encodeURIComponent(query)}&page=${page}&page_size=${pageSize}`);\n};\n\n// Get recipes by author\nexport const getRecipesByAuthor = async (authorId, page = 1, pageSize = 12) => {\n  if (USE_MOCK_API) {\n    return mockApi.getRecipesByAuthor(authorId, page, pageSize);\n  }\n  return apiRequest(`/recipes/?author=${authorId}&page=${page}&page_size=${pageSize}`);\n};\n\n// Rate a recipe\nexport const rateRecipe = async (recipeId, rating) => {\n  if (USE_MOCK_API) {\n    return mockApi.rateRecipe(recipeId, rating);\n  }\n  return apiRequest(`/recipes/${recipeId}/rate/`, {\n    method: 'POST',\n    body: JSON.stringify({\n      rating\n    })\n  });\n};\n\n// Like a recipe\nexport const likeRecipe = async recipeId => {\n  if (USE_MOCK_API) {\n    return mockApi.likeRecipe(recipeId);\n  }\n  return apiRequest(`/interactions/recipes/${recipeId}/like/`, {\n    method: 'POST'\n  });\n};\n\n// Unlike a recipe\nexport const unlikeRecipe = async recipeId => {\n  if (USE_MOCK_API) {\n    return mockApi.unlikeRecipe(recipeId);\n  }\n  return apiRequest(`/interactions/recipes/${recipeId}/unlike/`, {\n    method: 'POST'\n  });\n};\n\n// Add a comment to a recipe\nexport const addComment = async (recipeId, comment) => {\n  if (USE_MOCK_API) {\n    return mockApi.addComment(recipeId, comment);\n  }\n  return apiRequest(`/interactions/recipes/${recipeId}/comments/add/`, {\n    method: 'POST',\n    body: JSON.stringify({\n      content: comment\n    })\n  });\n};\n\n// Get comments for a recipe\nexport const getComments = async recipeId => {\n  if (USE_MOCK_API) {\n    return mockApi.getComments(recipeId);\n  }\n  return apiRequest(`/interactions/recipes/${recipeId}/comments/`);\n};","map":{"version":3,"names":["apiRequest","mockApi","USE_MOCK_API","getRecipes","page","pageSize","getRecipe","id","createRecipe","recipeData","console","log","formData","FormData","Object","keys","forEach","key","append","JSON","stringify","undefined","backendKey","method","body","updateRecipe","deleteRecipe","searchRecipes","query","encodeURIComponent","getRecipesByAuthor","authorId","rateRecipe","recipeId","rating","likeRecipe","unlikeRecipe","addComment","comment","content","getComments"],"sources":["c:/Users/acer/Downloads/New folder/src/services/recipeService.js"],"sourcesContent":["import apiRequest from './api';\r\nimport * as mockApi from './mockApi';\r\n\r\n// Flag to determine if we should use mock API\r\nconst USE_MOCK_API = false; // Set to false when backend is available\r\n\r\n// Get all recipes with optional pagination\r\nexport const getRecipes = async (page = 1, pageSize = 12) => {\r\n  if (USE_MOCK_API) {\r\n    return mockApi.getRecipes(page, pageSize);\r\n  }\r\n  \r\n  return apiRequest(`/recipes/?page=${page}&page_size=${pageSize}`);\r\n};\r\n\r\n// Get a specific recipe by ID\r\nexport const getRecipe = async (id) => {\r\n  if (USE_MOCK_API) {\r\n    return mockApi.getRecipe(id);\r\n  }\r\n  \r\n  return apiRequest(`/recipes/${id}/`);\r\n};\r\n\r\n// Create a new recipe\r\nexport const createRecipe = async (recipeData) => {\r\n  if (USE_MOCK_API) {\r\n    return mockApi.createRecipe(recipeData);\r\n  }\r\n  \r\n  console.log('Creating recipe with data:', recipeData); // Debugging\r\n  \r\n  // Handle file upload by creating FormData\r\n  const formData = new FormData();\r\n  \r\n  // Add all fields to formData with correct field names\r\n  Object.keys(recipeData).forEach(key => {\r\n    if (key === 'image' && recipeData[key]) {\r\n      // Handle file upload\r\n      formData.append(key, recipeData[key]);\r\n    } else if (key === 'ingredients' || key === 'instructions') {\r\n      // Convert arrays to JSON strings\r\n      formData.append(key, JSON.stringify(recipeData[key]));\r\n    } else if (recipeData[key] !== null && recipeData[key] !== undefined) {\r\n      // Map frontend field names to backend field names\r\n      let backendKey = key;\r\n      if (key === 'prepTime') {\r\n        backendKey = 'prep_time';\r\n      } else if (key === 'cookTime') {\r\n        backendKey = 'cook_time';\r\n      }\r\n      formData.append(backendKey, recipeData[key]);\r\n    }\r\n  });\r\n  \r\n  console.log('FormData being sent:', formData); // Debugging\r\n  \r\n  return apiRequest('/recipes/', {\r\n    method: 'POST',\r\n    body: formData\r\n  }, true); // Pass true to indicate this is a FormData request\r\n};\r\n\r\n// Update an existing recipe\r\nexport const updateRecipe = async (id, recipeData) => {\r\n  if (USE_MOCK_API) {\r\n    return mockApi.updateRecipe(id, recipeData);\r\n  }\r\n  \r\n  // Handle file upload by creating FormData\r\n  const formData = new FormData();\r\n  \r\n  // Add all fields to formData with correct field names\r\n  Object.keys(recipeData).forEach(key => {\r\n    if (key === 'image' && recipeData[key]) {\r\n    }\r\n  });\r\n  \r\n  return apiRequest(`/recipes/${id}/`, {\r\n    method: 'PUT',\r\n    body: formData\r\n  }, true); // Pass true to indicate this is a FormData request\r\n};\r\n\r\n// Delete a recipe\r\nexport const deleteRecipe = async (id) => {\r\n  if (USE_MOCK_API) {\r\n    return mockApi.deleteRecipe(id);\r\n  }\r\n  \r\n  return apiRequest(`/recipes/${id}/`, {\r\n    method: 'DELETE'\r\n  });\r\n};\r\n\r\n// Search recipes by name or ingredients\r\nexport const searchRecipes = async (query, page = 1, pageSize = 12) => {\r\n  if (USE_MOCK_API) {\r\n    return mockApi.searchRecipes(query, page, pageSize);\r\n  }\r\n  \r\n  return apiRequest(`/recipes/search/?q=${encodeURIComponent(query)}&page=${page}&page_size=${pageSize}`);\r\n};\r\n\r\n// Get recipes by author\r\nexport const getRecipesByAuthor = async (authorId, page = 1, pageSize = 12) => {\r\n  if (USE_MOCK_API) {\r\n    return mockApi.getRecipesByAuthor(authorId, page, pageSize);\r\n  }\r\n  \r\n  return apiRequest(`/recipes/?author=${authorId}&page=${page}&page_size=${pageSize}`);\r\n};\r\n\r\n// Rate a recipe\r\nexport const rateRecipe = async (recipeId, rating) => {\r\n  if (USE_MOCK_API) {\r\n    return mockApi.rateRecipe(recipeId, rating);\r\n  }\r\n  \r\n  return apiRequest(`/recipes/${recipeId}/rate/`, {\r\n    method: 'POST',\r\n    body: JSON.stringify({ rating })\r\n  });\r\n};\r\n\r\n// Like a recipe\r\nexport const likeRecipe = async (recipeId) => {\r\n  if (USE_MOCK_API) {\r\n    return mockApi.likeRecipe(recipeId);\r\n  }\r\n  \r\n  return apiRequest(`/interactions/recipes/${recipeId}/like/`, {\r\n    method: 'POST'\r\n  });\r\n};\r\n\r\n// Unlike a recipe\r\nexport const unlikeRecipe = async (recipeId) => {\r\n  if (USE_MOCK_API) {\r\n    return mockApi.unlikeRecipe(recipeId);\r\n  }\r\n  \r\n  return apiRequest(`/interactions/recipes/${recipeId}/unlike/`, {\r\n    method: 'POST'\r\n  });\r\n};\r\n\r\n// Add a comment to a recipe\r\nexport const addComment = async (recipeId, comment) => {\r\n  if (USE_MOCK_API) {\r\n    return mockApi.addComment(recipeId, comment);\r\n  }\r\n  \r\n  return apiRequest(`/interactions/recipes/${recipeId}/comments/add/`, {\r\n    method: 'POST',\r\n    body: JSON.stringify({ content: comment })\r\n  });\r\n};\r\n\r\n// Get comments for a recipe\r\nexport const getComments = async (recipeId) => {\r\n  if (USE_MOCK_API) {\r\n    return mockApi.getComments(recipeId);\r\n  }\r\n  \r\n  return apiRequest(`/interactions/recipes/${recipeId}/comments/`);\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}