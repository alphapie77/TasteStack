{"ast":null,"code":"import apiRequest from './api';\nimport * as mockApi from './mockApi';\n\n// Flag to determine if we should use mock API\nconst USE_MOCK_API = false; // Set to false when backend is available\n\n// User registration\nexport const register = async userData => {\n  if (USE_MOCK_API) {\n    return mockApi.register(userData);\n  }\n  return apiRequest('/auth/register/', {\n    method: 'POST',\n    body: JSON.stringify(userData)\n  });\n};\n\n// User login\nexport const login = async credentials => {\n  if (USE_MOCK_API) {\n    const data = await mockApi.login(credentials);\n\n    // Store token in localStorage\n    if (data.token) {\n      localStorage.setItem('token', data.token);\n    }\n    return data;\n  }\n  const data = await apiRequest('/auth/login/', {\n    method: 'POST',\n    body: JSON.stringify(credentials)\n  });\n\n  // Store token in localStorage\n  if (data.token) {\n    localStorage.setItem('token', data.token);\n  }\n  return data;\n};\n\n// User logout\nexport const logout = () => {\n  if (USE_MOCK_API) {\n    localStorage.removeItem('token');\n    return Promise.resolve({\n      message: 'Logged out successfully'\n    });\n  }\n  localStorage.removeItem('token');\n};\n\n// Get current user profile\nexport const getCurrentUser = async () => {\n  if (USE_MOCK_API) {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Not authenticated');\n    }\n\n    // Decode the token to get user data (for demo purposes)\n    try {\n      const userData = JSON.parse(atob(token));\n      return userData;\n    } catch (error) {\n      throw new Error('Invalid token');\n    }\n  }\n  return apiRequest('/auth/user/');\n};\n\n// Update user profile\nexport const updateProfile = async userData => {\n  if (USE_MOCK_API) {\n    // In a real mock implementation, we would update the user data\n    // For now, we'll just return the user data as if it was updated\n    return userData;\n  }\n\n  // Handle file upload by creating FormData\n  const formData = new FormData();\n\n  // Add all fields to formData\n  Object.keys(userData).forEach(key => {\n    if (key === 'profile_picture' && userData[key]) {\n      // Handle file upload\n      formData.append(key, userData[key]);\n    } else if (userData[key] !== null && userData[key] !== undefined) {\n      formData.append(key, userData[key]);\n    }\n  });\n  return apiRequest('/auth/user/', {\n    method: 'PUT',\n    body: formData,\n    headers: {\n      // Remove Content-Type to let browser set it with boundary for multipart/form-data\n    }\n  }, true); // Pass true to indicate this is a FormData request\n};\n\n// Check if user is authenticated\nexport const isAuthenticated = () => {\n  return !!localStorage.getItem('token');\n};\n\n// Get token\nexport const getToken = () => {\n  return localStorage.getItem('token');\n};","map":{"version":3,"names":["apiRequest","mockApi","USE_MOCK_API","register","userData","method","body","JSON","stringify","login","credentials","data","token","localStorage","setItem","logout","removeItem","Promise","resolve","message","getCurrentUser","getItem","Error","parse","atob","error","updateProfile","formData","FormData","Object","keys","forEach","key","append","undefined","headers","isAuthenticated","getToken"],"sources":["c:/Users/acer/Downloads/New folder/src/services/authService.js"],"sourcesContent":["import apiRequest from './api';\r\nimport * as mockApi from './mockApi';\r\n\r\n// Flag to determine if we should use mock API\r\nconst USE_MOCK_API = false; // Set to false when backend is available\r\n\r\n// User registration\r\nexport const register = async (userData) => {\r\n  if (USE_MOCK_API) {\r\n    return mockApi.register(userData);\r\n  }\r\n  \r\n  return apiRequest('/auth/register/', {\r\n    method: 'POST',\r\n    body: JSON.stringify(userData)\r\n  });\r\n};\r\n\r\n// User login\r\nexport const login = async (credentials) => {\r\n  if (USE_MOCK_API) {\r\n    const data = await mockApi.login(credentials);\r\n    \r\n    // Store token in localStorage\r\n    if (data.token) {\r\n      localStorage.setItem('token', data.token);\r\n    }\r\n    \r\n    return data;\r\n  }\r\n  \r\n  const data = await apiRequest('/auth/login/', {\r\n    method: 'POST',\r\n    body: JSON.stringify(credentials)\r\n  });\r\n  \r\n  // Store token in localStorage\r\n  if (data.token) {\r\n    localStorage.setItem('token', data.token);\r\n  }\r\n  \r\n  return data;\r\n};\r\n\r\n// User logout\r\nexport const logout = () => {\r\n  if (USE_MOCK_API) {\r\n    localStorage.removeItem('token');\r\n    return Promise.resolve({ message: 'Logged out successfully' });\r\n  }\r\n  \r\n  localStorage.removeItem('token');\r\n};\r\n\r\n// Get current user profile\r\nexport const getCurrentUser = async () => {\r\n  if (USE_MOCK_API) {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      throw new Error('Not authenticated');\r\n    }\r\n    \r\n    // Decode the token to get user data (for demo purposes)\r\n    try {\r\n      const userData = JSON.parse(atob(token));\r\n      return userData;\r\n    } catch (error) {\r\n      throw new Error('Invalid token');\r\n    }\r\n  }\r\n  \r\n  return apiRequest('/auth/user/');\r\n};\r\n\r\n// Update user profile\r\nexport const updateProfile = async (userData) => {\r\n  if (USE_MOCK_API) {\r\n    // In a real mock implementation, we would update the user data\r\n    // For now, we'll just return the user data as if it was updated\r\n    return userData;\r\n  }\r\n  \r\n  // Handle file upload by creating FormData\r\n  const formData = new FormData();\r\n  \r\n  // Add all fields to formData\r\n  Object.keys(userData).forEach(key => {\r\n    if (key === 'profile_picture' && userData[key]) {\r\n      // Handle file upload\r\n      formData.append(key, userData[key]);\r\n    } else if (userData[key] !== null && userData[key] !== undefined) {\r\n      formData.append(key, userData[key]);\r\n    }\r\n  });\r\n  \r\n  return apiRequest('/auth/user/', {\r\n    method: 'PUT',\r\n    body: formData,\r\n    headers: {\r\n      // Remove Content-Type to let browser set it with boundary for multipart/form-data\r\n    }\r\n  }, true); // Pass true to indicate this is a FormData request\r\n};\r\n\r\n// Check if user is authenticated\r\nexport const isAuthenticated = () => {\r\n  return !!localStorage.getItem('token');\r\n};\r\n\r\n// Get token\r\nexport const getToken = () => {\r\n  return localStorage.getItem('token');\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}